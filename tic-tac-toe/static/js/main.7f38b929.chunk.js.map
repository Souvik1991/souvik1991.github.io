{"version":3,"sources":["components/reducer.js","components/store.js","components/game/header.js","components/game/game-box.js","components/game/player-box.js","components/game/player-details.js","components/game/show-match-winner.js","pages/game.js","components/actions.js","serviceWorker.js","index.js"],"names":["initialState","gameReady","playerOneName","playerTwoName","playerOneWinCount","playerTwoWinCount","totalGameCount","currentPlayer","gameArr","Array","fill","winIndex","winner","matchDraw","haveMatchWinner","game","state","action","tmpState","type","store","createStore","applyMiddleware","thunk","Header","className","GameBox","props","keys","map","el","key","onClick","onChooseTile","win","length","indexOf","PlayerBox","player","draw","current","name","step","PlayerDetails","useState","playerOne","setPlayerOne","playerTwo","setPlayerTwo","dispatch","useDispatch","htmlFor","autoComplete","id","value","onChange","e","target","disabled","ShowMatchWinner","Fragment","class","Game","this","placeAndCheck","Component","connect","index","getState","winComb","filter","i","checkWinner","setWinner","place","Boolean","window","location","hostname","match","require","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f38b929.chunk.js","sourcesContent":["const initialState = {\n    gameReady: false,\n    playerOneName: '',\n    playerTwoName: '',\n    playerOneWinCount: 0,\n    playerTwoWinCount: 0,\n    totalGameCount: 6,\n    currentPlayer: 1,\n    gameArr: [...Array(9).fill(-1)],\n    winIndex: [],\n    winner: -1,\n    matchDraw: false,\n    haveMatchWinner: false \n};\n\nconst game = (state = initialState, action) => {\n    let tmpState = {};\n    // console.log(action);\n    switch (action.type) {\n        case 'PLAYER_SET':\n            tmpState = {\n                ...state,\n                playerOneName: action.playerOneName,\n                playerTwoName: action.playerTwoName,\n                gameReady: true\n            }\n        break;\n\n        case 'PLACE':\n            tmpState = {\n                ...state,\n                gameArr: action.gameArr,\n                currentPlayer: action.currentPlayer\n            }\n        break;\n\n        case 'SET_WINNER':\n            tmpState = {\n                ...state,\n                winner: action.winner,\n                winIndex: action.winIndex,\n                gameArr: action.gameArr,\n                playerOneWinCount: action.playerOneWinCount,\n                playerTwoWinCount: action.playerTwoWinCount\n            };\n        break;\n\n        case 'DRAW':\n            tmpState = {\n                ...state,\n                gameArr: action.gameArr,\n                matchDraw: true\n            };\n        break;\n\n        case 'RESET_GAME':\n            tmpState = {\n                ...state,\n                winner: -1,\n                winIndex: [],\n                gameArr: [...Array(9).fill(-1)],\n                currentPlayer: 1,\n                matchDraw: false,\n            };\n        break;\n\n        case 'RELOAD_GAME':\n            tmpState = {\n                gameReady: false,\n                playerOneName: '',\n                playerTwoName: '',\n                playerOneWinCount: 0,\n                playerTwoWinCount: 0,\n                totalGameCount: 6,\n                currentPlayer: 1,\n                gameArr: [...Array(9).fill(-1)],\n                winIndex: [],\n                winner: -1,\n                matchDraw: false,\n                haveMatchWinner: false \n            };\n        break;\n\n        case 'FINAL_WINNER':\n            tmpState = {\n                ...state,\n                haveMatchWinner: true\n            }\n        break;\n\n        default:\n            tmpState = state\n        break;\n    }\n    // console.log(tmpState);\n    return tmpState;\n}\n\nexport default game;","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport game from \"./reducer\";\n\nconst store = createStore(\n    game,\n    applyMiddleware(thunk)\n);\n  \nexport default store;","import React from 'react';\n\nconst Header = () => {\n    return <header>\n        <p className=\"text-uppercase\">Tic</p>\n        <p className=\"text-uppercase\">Tac</p>\n        <p className=\"text-uppercase\">Toe</p>\n    </header>\n}\n\nexport default Header;","import React from 'react';\n\nconst GameBox = (props) => {\n    // console.log(props.win);\n    return (\n        <div className=\"flexbox gamem\">\n            <div className=\"game-main-cont\">\n                <div className=\"game-cont board\">\n                    {\n                        [...Array(9).keys()].map((el) => (\n                            <div key={el} className=\"square\" onClick={() => props.onChooseTile(el)}>\n                                <div className={`sign${props.win.length > 0 && props.win.indexOf(el) > -1 ? ' selected' :''}`}>\n                                    {props.game[el] === 1 && <div className=\"cross\"></div>}\n                                    {props.game[el] === 2 && <div className=\"round\"></div>}\n                                </div>\n                            </div>\n                        ))\n                    }\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default GameBox;","import React from 'react';\n\nconst PlayerBox = (props) => {\n    return (\n        <div className=\"flexbox\">\n            <div className={`player-main-cont${props.winner === props.player ? ' winner' : ''}${(props.draw) ? ' draw':''}`}>\n                <div className={`turn${props.current === props.player ? ' visible' : ''}`}>\n                    {props.winner === props.player ? 'Winner' : (props.draw) ? 'Draw' : 'Your Turn'}\n                </div>\n                <div className=\"player-cont\">\n                    <div className=\"heading text-uppercase\">player {props.player}</div>\n                    <div className=\"name\">{props.name}</div>\n                    <div className=\"sign\">\n                        {props.player === 1 && <div className=\"cross\"></div>}\n                        {props.player === 2 && <div className=\"round\"></div>}\n                    </div>\n                </div>\n                <div className=\"steps\">\n                    {\n                        [...Array(props.step).keys()].map((el) => (\n                            <span className={`step${el < props.win ? ' active' : ''}`} key={el}></span>\n                        ))\n                    }\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default PlayerBox;","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst PlayerDetails = () => {\n    const [playerOne, setPlayerOne] = useState(\"\");\n    const [playerTwo, setPlayerTwo] = useState(\"\");\n    const dispatch = useDispatch();\n\n    return (\n        <div className=\"flexbox\">\n            <div className=\"game-main-cont\">\n                <div className=\"game-cont form\">\n                    <div className=\"heading\">Welcome to <span className=\"text-uppercase\">Tic tac toe</span></div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"player1\">Player 1</label>\n                        <input type=\"text\" autoComplete=\"off\" className=\"input-field\" id=\"player1\" name=\"player1\" value={playerOne} onChange={(e) => setPlayerOne(e.target.value)}/>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"player2\">Player 2</label>\n                        <input type=\"text\" autoComplete=\"off\" className=\"input-field\" id=\"player2\" name=\"player2\" value={playerTwo} onChange={(e) => setPlayerTwo(e.target.value)}/>\n                    </div>\n\n                    <button className=\"gradient-btn\" disabled={!playerOne || !playerTwo} onClick={() => dispatch({ \n                        type: 'PLAYER_SET', \n                        playerOneName: playerOne,\n                        playerTwoName: playerTwo \n                    })}>Continue</button>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default PlayerDetails;","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nconst ShowMatchWinner = (props) => {\n    // console.log(props.win);\n    const dispatch = useDispatch();\n    return (\n        <React.Fragment>\n            <div className=\"flexbox\">\n                <div className=\"game-main-cont\">\n                    <div className=\"game-cont winner\" onClick={() => dispatch({\n                        type: 'RELOAD_GAME'\n                    })}>\n                        <div className=\"heading text-uppercase\">Winner!</div>\n                        <div className=\"player\">\n                            <div className=\"pheading text-uppercase\">player {props.player}</div>\n                            <div className=\"name\">{props.name}</div>\n                            <div className=\"sign\">\n                                {props.player === 1 && <div className=\"cross\"></div>}\n                                {props.player === 2 && <div className=\"round\"></div>}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"pyro\">\n                <div class=\"before\"></div>\n                <div class=\"after\"></div>\n        </div>\n        </React.Fragment>\n    )\n};\n\nexport default ShowMatchWinner;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { placeAndCheck } from \"../components/actions\";\n\nimport Header from \"../components/game/header\";\nimport GameBox from \"../components/game/game-box\";\nimport PlayerBox from \"../components/game/player-box\";\nimport PlayerDetails from \"../components/game/player-details\";\nimport ShowMatchWinner from \"../components/game/show-match-winner\";\n\nclass Game extends Component{\n    // componentDidMount(){\n    //     console.log(1);\n    //     console.log(this.props);\n    // }\n    render(){\n        let {gameReady, haveMatchWinner, totalGameCount, playerOneWinCount, playerTwoWinCount, currentPlayer, winner, matchDraw, gameArr, winIndex, playerOneName, playerTwoName} = this.props;\n        return (\n            <div className=\"flex-container game-main-container vertical-middle\">\n                <Header/>\n                {!gameReady && <PlayerDetails/>}\n                {gameReady && !haveMatchWinner && \n                    <React.Fragment>\n                        <PlayerBox name={playerOneName} player={1} step={totalGameCount} win={playerOneWinCount} current={currentPlayer} winner={winner} draw={matchDraw}/>\n                        <GameBox game={gameArr} win={winIndex} onChooseTile={this.props.placeAndCheck}/>\n                        <PlayerBox name={playerTwoName} player={2} step={totalGameCount} win={playerTwoWinCount} current={currentPlayer} winner={winner} draw={matchDraw}/>\n                    </React.Fragment>\n                }\n                {haveMatchWinner && <ShowMatchWinner player={playerOneWinCount > playerTwoWinCount ? 1 : 2} name={playerOneWinCount > playerTwoWinCount ? playerOneName : playerTwoName}/>}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    gameReady: state.gameReady,\n    playerOneName: state.playerOneName,\n    playerTwoName: state.playerTwoName,\n    playerOneWinCount: state.playerOneWinCount,\n    playerTwoWinCount: state.playerTwoWinCount,\n    totalGameCount: state.totalGameCount,\n    currentPlayer: state.currentPlayer,\n    gameArr: state.gameArr,\n    winIndex: state.winIndex,\n    winner: state.winner,\n    matchDraw: state.matchDraw,\n    haveMatchWinner: state.haveMatchWinner\n});\n  \nexport default connect(mapStateToProps, { placeAndCheck })(Game);","const checkWinner = (game) => {\n    let winComb = [\n        [0, 1, 2],\n        [0, 3, 6],\n        [0, 4, 8],\n        [1, 4, 7],\n        [2, 5, 8],\n        [2, 4, 6],\n        [3, 4, 5],\n        [6, 7, 8]\n    ];\n\n    if(game.filter(el => el !== -1).length > 0){\n        for(let i = 0; i < winComb.length; i++){\n            let el = winComb[i];\n            if(game[el[0]] !== -1 || game[el[1]] !== -1 || game[el[2]] !== -1){\n                if(game[el[0]] === game[el[1]] && game[el[1]] === game[el[2]]) return {winner: game[el[0]], winIndex: el}\n            }\n        }\n    }\n    return {winner: -1, winIndex: []}\n};\n\nexport function setWinner(winner, winIndex, gameArr, playerOneWinCount, playerTwoWinCount) {\n    return {\n        type: 'SET_WINNER',\n        winner,\n        winIndex,\n        gameArr,\n        playerOneWinCount,\n        playerTwoWinCount\n    };\n}\n\nexport function setDraw(gameArr) {\n    return {\n        type: 'DRAW',\n        gameArr\n    };\n}\n\nexport function place(gameArr, currentPlayer){\n    return {\n        type: 'PLACE',\n        gameArr,\n        currentPlayer\n    };\n}\n\nexport function placeAndCheck(index){\n    return function(dispatch, getState){\n        if(getState().winner !== -1 || getState().matchDraw){\n            dispatch({type: 'RESET_GAME'})\n            return;\n        }\n\n        let game = [...getState().gameArr];\n        if(game[index] !== -1) return;\n\n        const currentPlayer = getState().currentPlayer;\n        game[index] = currentPlayer;\n\n        // console.log(game);\n        let {winner, winIndex} = checkWinner(game);\n\n        if(winner !== -1){\n            let playerOneWinCount =  getState().playerOneWinCount,\n                playerTwoWinCount = getState().playerTwoWinCount;\n                \n            if(winner === 1) playerOneWinCount++;\n            else playerTwoWinCount++;\n\n            dispatch(setWinner(winner, winIndex, game, playerOneWinCount, playerTwoWinCount));\n            if(playerOneWinCount === getState().totalGameCount || playerTwoWinCount === getState().totalGameCount) dispatch({type: 'FINAL_WINNER'})\n        }\n        else{\n            const remainTurn = game.filter(el => el === -1);\n            if(remainTurn.length === 0) dispatch(setDraw(game));\n            else dispatch(place(game, currentPlayer === 1 ? 2 : 1));\n        }\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from \"./components/store\";\nimport Game from \"./pages/game\";\n\nimport * as serviceWorker from './serviceWorker';\n\nrequire('./static/base.css');\nrequire('./static/firework.css');\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<Game/>\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}